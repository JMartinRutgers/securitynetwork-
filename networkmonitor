import psutil
import platform
import socket
import subprocess
from datetime import datetime
import logging

def setup_logging():
    logging.basicConfig(
        filename='network_monitor.log',
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

def check_active_connections():
    connections = psutil.net_connections(kind='inet')
    suspicious = []
    
    for conn in connections:
        if conn.status == 'ESTABLISHED':
            # Log established connections
            connection_info = f"Local: {conn.laddr.ip}:{conn.laddr.port} "
            connection_info += f"Remote: {conn.raddr.ip}:{conn.raddr.port if conn.raddr else 'N/A'}"
            logging.info(connection_info)
            
            # Flag suspicious high ports
            if conn.raddr and conn.raddr.port > 50000:
                suspicious.append(connection_info)
    
    return suspicious

def check_network_usage():
    # Get network interface statistics
    net_io = psutil.net_io_counters()
    return {
        'bytes_sent': net_io.bytes_sent,
        'bytes_recv': net_io.bytes_recv,
        'packets_sent': net_io.packets_sent,
        'packets_recv': net_io.packets_recv,
        'error_in': net_io.errin,
        'error_out': net_io.errout,
        'drop_in': net_io.dropin,
        'drop_out': net_io.dropout
    }

def main():
    setup_logging()
    print("Starting network security monitoring...")
    
    while True:
        try:
            # Check active connections
            suspicious_conns = check_active_connections()
            if suspicious_conns:
                print("\nSuspicious connections found:")
                for conn in suspicious_conns:
                    print(conn)
                    logging.warning(f"Suspicious connection: {conn}")
            
            # Check network usage
            usage = check_network_usage()
            print("\nNetwork Usage Statistics:")
            for key, value in usage.items():
                print(f"{key}: {value}")
            
            # If there are errors or dropped packets, log them
            if usage['error_in'] > 0 or usage['error_out'] > 0:
                logging.warning(f"Network errors detected: In={usage['error_in']}, Out={usage['error_out']}")
            if usage['drop_in'] > 0 or usage['drop_out'] > 0:
                logging.warning(f"Dropped packets detected: In={usage['drop_in']}, Out={usage['drop_out']}")
            
            # Wait before next check
            time.sleep(60)  # Check every minute
            
        except KeyboardInterrupt:
            print("\nStopping network monitor...")
            break
        except Exception as e:
            logging.error(f"Error in monitoring: {str(e)}")
            print(f"Error occurred: {str(e)}")

if __name__ == "__main__":
    main()
